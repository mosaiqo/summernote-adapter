// Generated by CoffeeScript 1.10.0
(function() {
  var $doc, $root, _parseOpts, _preventEmptyValuesOnSubmit, attachEditor, basePath, defaultToolbar, defaults, destroyEditor, editorLoaded, editorQueue, getLang, getLocalesPath, loadLocale, localesMap, prepareEditor, setupEditor,
    hasProp = {}.hasOwnProperty;

  editorLoaded = false;

  editorQueue = [];

  basePath = '../vendor/summernote/';

  getLocalesPath = function() {
    return basePath + 'lang/';
  };

  localesMap = {
    'ca': 'ca-ES',
    'de': 'de-DE',
    'en': 'en-US',
    'es': 'es-ES',
    'fr': 'fr-FR',
    'it': 'it-IT',
    'nl': 'nl-NL'
  };

  defaults = {
    iconPrefix: 'icon icon-'
  };

  defaultToolbar = {
    style: {
      style: true
    },
    fontStyle: {
      bold: true,
      italic: true,
      strikethrough: true,
      underline: false,
      superscript: false,
      subscript: false,
      paragraph: true,
      clear: false
    },
    font: {
      fontname: false,
      fontsize: false,
      height: false
    },
    insert: {
      ul: true,
      ol: true,
      table: true,
      link: true,
      picture: true,
      hr: true
    },
    view: {
      fullscreen: true,
      codeview: false
    }
  };

  $doc = $(document);

  $root = $('html');


  /*
  @return {String} the page language
   */

  getLang = function() {
    var lang;
    lang = $root.attr('lang') || 'en';
    return localesMap[lang] || lang;
  };


  /*
  Load a Summernote locale file
  
  @param {String}   lang
  @param {Function} callback  executed when the locale is loaded
   */

  loadLocale = function(lang, callback) {
    var localeJS;
    if ((lang === localesMap['en']) || $("[data-summernote-locale='" + lang + "']").length) {
      if ($.isFunction(callback)) {
        return callback();
      }
    } else {
      localeJS = document.createElement('script');
      localeJS.setAttribute('data-summernote-locale', lang);
      localeJS.setAttribute('src', getLocalesPath() + ("summernote-" + lang + ".js"));
      localeJS.onload = function() {
        if ($.isFunction(callback)) {
          return callback();
        }
      };
      return document.querySelector('head').appendChild(localeJS);
    }
  };


  /*
  Turn a textarea into a Summernote editor
  
  @param  {jQuery wrapped DOM element} elem textarea to replace by a Summernote instance
   */

  setupEditor = function(elem) {
    var instanceSettings, settings;
    if (!elem || !elem.length) {
      return;
    }
    instanceSettings = elem.data('editorSettings') || {};
    settings = $.extend({}, defaults, _parseOpts(instanceSettings));
    if (!settings.lang) {
      settings.lang = getLang();
    }
    return loadLocale(settings.lang, (function(_this) {
      return function() {
        elem.summernote(settings);
        return _preventEmptyValuesOnSubmit(elem);
      };
    })(this));
  };


  /*
  Inline (per instance) settings parsing
   */

  _parseOpts = function(opts) {
    var buttons, group, groupButtons, k, toolbar, toolbarOpts, v;
    if (opts == null) {
      opts = {};
    }
    toolbarOpts = $.extend({}, defaultToolbar);
    if (opts.lists != null) {
      toolbarOpts.insert.ul = opts.lists;
      toolbarOpts.insert.ol = opts.lists;
    }
    if (opts.table != null) {
      toolbarOpts.insert.table = opts.table;
    }
    if (opts.picture != null) {
      toolbarOpts.insert.picture = opts.picture;
    }
    if (opts.link != null) {
      toolbarOpts.insert.link = opts.link;
    }
    if (opts.horizontalrule != null) {
      toolbarOpts.insert.horizontalrule = opts.tables;
    }
    if (opts.source != null) {
      toolbarOpts.view.codeview = opts.source;
    }
    if (opts.fullscreen != null) {
      toolbarOpts.view.fullscreen = opts.fullscreen;
    }
    if (opts.fonts != null) {
      toolbarOpts.font.fontname = opts.fonts;
    }
    if (opts.fontsize != null) {
      toolbarOpts.font.fontsize = opts.fontsize;
    }
    if (opts.lineheight != null) {
      toolbarOpts.font.height = opts.lineheight;
    }
    if (opts.align != null) {
      toolbarOpts.fontStyle.paragraph = opts.align;
    }
    if (opts.underline != null) {
      toolbarOpts.fontStyle.underline = opts.underline;
    }
    if (opts.superscript != null) {
      toolbarOpts.fontStyle.superscript = opts.superscript;
    }
    if (opts.subscript != null) {
      toolbarOpts.fontStyle.subscript = opts.subscript;
    }
    if (opts.styles) {
      toolbar.style.style = opts.styles;
    }
    toolbar = [];
    for (group in toolbarOpts) {
      if (!hasProp.call(toolbarOpts, group)) continue;
      buttons = toolbarOpts[group];
      groupButtons = [];
      for (k in buttons) {
        if (!hasProp.call(buttons, k)) continue;
        v = buttons[k];
        if (v) {
          groupButtons.push(k);
        }
      }
      if (groupButtons.length) {
        toolbar.push([group, groupButtons]);
      }
    }
    return {
      toolbar: toolbar
    };
  };


  /*
  Value sanitization
  
  Prevent empty values being converted to '<p><br></p>'# prevent empty values being converted to '<p><br></p>'
   */

  _preventEmptyValuesOnSubmit = function(elem) {
    var parentForm;
    parentForm = elem.parents('div').first();
    if (parentForm.legth) {
      return parentForm.on('submit', function() {
        if (elem.summernote('isEmpty') || elem.val() === '<p><br></p>') {
          return elem.val('');
        }
      });
    }
  };


  /*
  Setup a textarea to be transformed into a Summernote editor
  
  The Summernote files are only loaded if required. So if the textarea
  is initialised before Summernote is loaded, the action gets queued
  
  @param  {jQuery wrapped DOM element} elem textarea to replace by a Summernote instance
   */

  prepareEditor = function(elem) {
    if (editorLoaded) {
      return setupEditor(elem);
    } else {
      return editorQueue.push(elem);
    }
  };


  /*
  Destroy the Summernote instance
  
  @param  {jQuery wrapped DOM element} elem textarea to replace by a Summernote instance
   */

  destroyEditor = function(elem) {
    if (editorLoaded) {
      return elem.destroy();
    }
  };


  /*
  Inject the Summernote css and js files
  
  Using native js methods instead of jQuery because when injecting a js
  file using jQuery, jQuery performs an AJAX request and that causes a
  weird warning (thrown by pace.js)
   */

  attachEditor = function() {
    var summernoteCSS, summernoteJS;
    summernoteCSS = document.createElement('link');
    summernoteCSS.setAttribute('rel', 'stylesheet');
    summernoteCSS.setAttribute('href', basePath + 'dist/summernote.css');
    summernoteJS = document.createElement('script');
    summernoteJS.setAttribute('src', basePath + 'dist/summernote.min.js');
    summernoteJS.onload = function() {
      editorLoaded = true;
      if (editorQueue.length) {
        return editorQueue.forEach(setupEditor);
      }
    };
    document.querySelector('head').appendChild(summernoteCSS);
    return document.querySelector('body').appendChild(summernoteJS);
  };

  $(function() {
    var script;
    script = document.querySelector('script[src$="summernote-adapter.js"][data-summernote-path]') || document.querySelector('script[src$="summernote-adapter.min.js"][data-summernote-path]');
    if (script) {
      basePath = script.getAttribute('data-summernote-path');
    }
    attachEditor();
    $doc.on('MOSAIQO.editor.rendered', function(e, elems) {
      return elems.each(function(i, el) {
        return prepareEditor($(el));
      });
    });
    return $doc.on('MOSAIQO.editor.beforeDestroy', function(e, elems) {
      return elems.each(function(i, el) {
        return destroyEditor($(el));
      });
    });
  });

}).call(this);
